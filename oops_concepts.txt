class and object:
class Bankaccount():
    def __init__(self,accountno,accountname,ifsecode,balance):
        self.accountno=accountno
        self.accountname=accountname
        self.ifsecode=ifsecode
        self.balance=balance
    def withdraw(self,amount):
        self.balance-=amount
    def deposit(self,amount):
        self.balance+=amount
    def checkbalance(self):
        print(self.balance)
obj1=Bankaccount(123349895,'doni','MKJ178734',10000)

obj1.deposit(5000)
obj1.withdraw(15000)
obj1.withdraw(5)
obj1.checkbalance()

single inheritance:
class parent1:
    def method1(self):
        print("iam a parent")
class child(parent1):
    def method2(self):
        print("iam a child")
obj1=parent1()
obj1.method1()
obj2=child()
obj2.method1()
obj2.method2()

multiple:
class Father:
    def method1(self):
        print("i'm a father")
class mather:
    def method1(self):
        print("i'm a mather")
class child(mather,Father):
    def method3(self):
        print("i'm a child")
obj1=child()
obj1.method1()
obj1.method1()
obj1.method3()
print(child.__mro__)#method resolution order

MULTILEVEL INHERITANCE:
class grandFather:
    def method2(self):
        print("i'm a father")
class grandmather(grandFather):
    def method1(self):
        print("i'm a mather")
class child(grandmather):
    def method3(self):
        print("i'm a child")
obj1=child()
obj1.method2()
obj1.method1()
obj1.method3()
print(child.__mro__)

HIERARCHICAL INHERITANCE:
class grandFather:
    def method2(self):
        print("i'm a father")
class Child1(grandFather):
    def method1(self):
        print("i'm a CHILD1")
class Child2(grandFather):
    def method3(self):
        print("i'm a child2")
obj1=Child1()
obj2=Child2()
obj2.method2()
obj1.method2()
obj1.method1()
obj2.method3()
print(Child1.__mro__)
print(Child2.__mro__)

HYBRID INHERITANCE:
class grandFather:
    def method1(self):
        print("i'm a father")
class Parent1(grandFather):
    def method2(self):
        print("i'm a parent1")
class Parent2:
    def method3(self):
        print("i'm a parent2")
class Child(Parent1,Parent2):
    def method4(self):
        print("i'm a child2")
obj1=Child()
obj1.method1()
obj1.method2()
obj1.method4()
obj1.method3()
print(Child.__mro__)

output:
i'm a father
i'm a parent1
i'm a child2
i'm a parent2
(<class '__main__.Child'>, <class '__main__.Parent1'>, <class '__main__.grandFather'>, <class '__main__.Parent2'>, <class 'object'>)


example of INHERITANCE:
class Member:
    def __init__(self,Firstname,lastname,email,memberid,address,mobileno):
        self.Firstname=Firstname
        self.lastname=lastname
        self.email=email
        self.memberid=memberid
        self.address=address
        self.mobileno=mobileno
        
    
    def getFullname(self):
        print(self.Firstname+" "+self.lastname)
    
    def changeAdress(self,newaddress):
        self.address=newaddress
        print("address changed sucessfully")
    
    def changenumber(self,newnumber):
        self.mobileno=newnumber
        print("number changed successfully")

class Faculty(Member):
    def __init__(self,Firstname,lastname,email,memberid,address,mobileno,subjectsTeaching,salary):
        self.salary=salary
        self.subjectsTeaching=subjectsTeaching
        super().__init__(Firstname, lastname, email, memberid, address, mobileno)
        
    def getsalary(self):
        print("faculty salary:",self.salary)
        
    def subjectsTeaching(self):
        print(self.subjectsTeaching)
        
class Student(Member):
    def __init__(self,Firstname,lastname,email,memberid,address,mobileno,branch,GPA):
        self.branch=branch
        self.GPA=GPA
        super().__init__(Firstname, lastname, email, memberid, address, mobileno)
        
    def getbranch(self):
        print("the branch is:",self.branch)
        
    def getGPA(self):
        print(self.GPA)
        
student1=Student("Sirisha","Mahadevuni","abc@gmail.com","21311a1935","abc",9867456585,'ecm',9)
student1.Student()


METHOD OVERLOADING:
import multipledispatch
class A:
    @multipledispatch.dispatch(int,int)
    def add(self,a,b):
        return a+b
    @multipledispatch.dispatch(int,int,int)
    def add(self,a,b,c):
        return a+b+c
obj1=A()
print(obj1.add(2,3,4))